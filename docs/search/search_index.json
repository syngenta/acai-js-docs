{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Acai","text":"<p>DRY, configurable, declarative node library for working with Amazon Web Service Lambdas.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Highly configurable apigateway internal router</li> <li>Openapi schema adherence for all event types</li> <li>Extensible and customizable middleware for validation and other tasks</li> <li>DRY coding interfaces without the need of boilerplate</li> <li>Ease-of-use with the serverless framework</li> <li>Local Development support</li> <li>Happy Path Programming (See Philosophy below)</li> </ul>"},{"location":"#philosophy","title":"Philosophy","text":"<p>The Acai philosophy is to provide a dry, configurable, declarative library for use with the amazon lambdas, which encourages Happy Path Programming (HPP).</p> <p>Happy Path Programming is an idea in which inputs are all validated before operated on. This ensures code follows the happy path without the need for mid-level, nested exceptions and all the nasty exception handling that comes with that. The library uses layers of customizable middleware options to allow a developer to easily dictate what constitutes a valid input, without nested conditionals, try/catch blocks or other coding blocks which distract from the happy path that covers the majority of that codes intended operation.</p>"},{"location":"changes/","title":"2.0 Breaking Changes","text":""},{"location":"changes/#changes-to-the-acai-from-1x-to-20","title":"Changes to the Acai from 1.x to 2.0","text":"<p>In version 2.0 we have added a lot of cool new features, but that does require deprecating some old things. Below is a list of all the changes:</p> Tip <p>If you don't want to make the changes yourself manually, we have a script which will make the changes for you. Just run this command in your terminal from the root of the directory of the project you want to upgrade: <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/syngenta/acai-js-docs/main/scripts/node-upgrade.sh)\"\n</code></pre></p>"},{"location":"changes/#apigateway","title":"APIGateway","text":"old new description <code>router.route()</code> <code>router.route(event)</code> <code>router.route</code> now requires the event to be passed in <code>requiredParams</code> <code>requiredQuery</code> <code>requiredQuery</code> is how you define required query string params <code>request.params</code> <code>request.query</code> <code>request.query</code> is how you access query string params"},{"location":"changes/#dynamodb-s3-snssqs-event","title":"DynamoDB, S3 &amp; SNS/SQS Event","text":"old new description <code>event.records</code> <code>await event.getRecords()</code> to use advance validation features, you must the async method; <code>.records</code> still works"},{"location":"changes/#dynamodb-record","title":"DynamoDB Record","text":"old new <code>record.approximateCreationDateTime</code> <code>record.created</code> <code>record.awsRegion</code> <code>record.region</code> <code>record.eventID</code> <code>record.id</code> <code>record.eventName</code> <code>record.name</code> <code>record.eventSource</code> <code>record.source</code> <code>record.eventSourceARN</code> <code>record.sourceARN</code> <code>record.streamViewType</code> <code>record.streamType</code> <code>record.sizeBytes</code> <code>record.size</code> <code>record.userIdentity</code> <code>record.identity</code> <code>record.timeToLiveExpired</code> <code>record.expired</code>"},{"location":"changes/#s3-record","title":"S3 Record","text":"old new <code>record.awsRegion</code> <code>record.region</code> <code>record.eventID</code> <code>record.id</code> <code>record.eventName</code> <code>record.name</code> <code>record.eventSource</code> <code>record.source</code> <code>record.eventSourceARN</code> <code>record.sourceARN</code> <code>record.requestParameters</code> <code>record.request</code> <code>record.responseElements</code> <code>record.response</code> <code>record.s3SchemaVersion</code> <code>record.version</code>"},{"location":"changes/#snssqs-record","title":"SNS/SQS Record","text":"old new <code>record.awsRegion</code> <code>record.region</code> <code>record.eventName</code> <code>record.name</code> <code>record.eventSource</code> <code>record.source</code> <code>record.eventSourceARN</code> <code>record.sourceARN</code> <code>record.messageId</code> <code>record.id</code> <code>record.rawBody</code> <code>record.raw</code>"},{"location":"demo/","title":"Demo &amp; Explanation of the Acai","text":""},{"location":"demo/#video-30min","title":"Video (~30min)","text":""},{"location":"demo/#chapters","title":"Chapters","text":"<p>00:00 Intro</p> <p>00:20 What is the Acai</p> <p>04:30 Acai with DynamoDB Streams Demo</p> <p>09:38 Acai with S3 Events Demo</p> <p>11:54 Acai with SNS/SQS Events Demo</p> <p>12:39 Acai with ApiGateway Explanation</p> <p>16:00 Acai with ApiGateway Demo</p> <p>31:10 Breaking Changes</p> <p>31:40 Outro</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#requirements","title":"Requirements","text":"<ul> <li>Node 10.10 or higher; download and install Node.js</li> <li>Access to public npm registry</li> </ul>"},{"location":"install/#installation","title":"Installation","text":"Shell <pre><code>$ npm install acai-js\n</code></pre>"},{"location":"apigateway/","title":"APIGateway","text":"<p>Event handler for Amazon APIGateway REST &amp; GraphQL.</p>"},{"location":"apigateway/#features","title":"Features","text":"<ul> <li>Configurable router based on 3 common routing patterns</li> <li>Built-in request validation using standard OpenAPI schema</li> <li>Easily validate request in modular and declarative way without any additional code</li> <li>Able to easily extend with custom middleware at both app and per-endpoint levels</li> <li>Support for CORS, binary and Gzip compression</li> </ul>"},{"location":"apigateway/request/","title":"Request Object","text":"<p>By default, every endpoint function will receive an instance of the <code>RequestClient</code> class (aka <code>request</code>) as the first argument of their function. This <code>request</code> has a lot of properties which will do common things automatically, but still allows the developer to override those operations if they deem necessary. Below is a list and examples of all the properties of the <code>request</code>:</p> Example <p>Don't like reading documentation? Then look at our examples which can run locally! </p>"},{"location":"apigateway/request/#request-properties","title":"Request Properties","text":"property type mutable description <code>method</code> str no the http method of the request <code>resource</code> str no the AWS resource being invoked <code>authorizer</code> object no if using a customized authorizer, the authorizer object <code>headers</code> object no the headers of the request <code>params</code> object no combination of query string and path params in one object <code>queryParams</code> object no query string parameters from the request <code>pathParams</code> object no the path parameters of the request <code>route</code> str no the requested route with placeholders of params <code>path</code> str no the raw requested path with actual param values <code>json</code> object no the body of the request, converted from json string in object <code>xml</code> object no the body of the request, converted from xml string in object <code>graphql</code> str no the body of the graphql request as a string <code>body</code> any no the body of the request, converted to based on data type <code>raw</code> any no the raw body of the request no conversion <code>context</code> object yes mutable request context to assigned and pass around <code>event</code> object no the full event originally coming from the lambda"},{"location":"apigateway/request/#requestmethod","title":"<code>request.method</code>","text":"<pre><code>console.log(request.method);\n\n// example output:\n'get'\n</code></pre>"},{"location":"apigateway/request/#requestresource","title":"<code>request.resource</code>","text":"<pre><code>console.log(request.resource);\n\n// example output:\n'/{proxy+}'\n</code></pre>"},{"location":"apigateway/request/#requestauthorizer","title":"<code>request.authorizer</code>","text":"Tip <p>This is only useful if you are using an external authorizer with your lambda.</p> <pre><code>console.log(request.authorizer);\n\n// example output:\n{\n    apiKey: 'SOME KEY',\n    userId: 'x-1-3-4',\n    correlationId: 'abc12312',\n    principalId: '9de3f415a97e410386dbef146e88744e',\n    integrationLatency: 572\n}\n</code></pre>"},{"location":"apigateway/request/#requestheaders","title":"<code>request.headers</code>","text":"<pre><code>console.log(request.headers);\n\n// example output:\n{\n    'x-api-key': 'SOME-KEY',\n    'content-type': 'application/json'\n}\n</code></pre>"},{"location":"apigateway/request/#requestparams","title":"<code>request.params</code>","text":"Info <p>This combines both path parameters and query string parameters, nested in one object.</p> <pre><code>console.log(request.params);\n\n// example output:\n{\n    query: {\n        name: 'me'\n    },\n    path: {\n        id: 1\n    }\n}\n</code></pre>"},{"location":"apigateway/request/#requestqueryparams","title":"<code>request.queryParams</code>","text":"<pre><code>console.log(request.queryParams);\n\n// example output:\n{\n     name: 'me'\n}\n</code></pre>"},{"location":"apigateway/request/#requestpathparams","title":"<code>request.pathParams</code>","text":"<pre><code>console.log(request.pathParams);\n\n// example output:\n{\n     id: 1\n}\n</code></pre>"},{"location":"apigateway/request/#requestroute","title":"<code>request.route</code>","text":"Info <p>This will provide the route with the path param variables included</p> <pre><code>console.log(request.route);\n\n// example output:\n'grower/{id}'\n</code></pre>"},{"location":"apigateway/request/#requestpath","title":"<code>request.path</code>","text":"Info <p>This will provide the route with the path param values replacing the variables</p> <pre><code>console.log(request.path);\n\n// example output:\n'grower/1'\n</code></pre>"},{"location":"apigateway/request/#requestjson","title":"<code>request.json</code>","text":"Warning <p>This will raise an unhandled exception if the body is not json compatible</p> <pre><code>console.log(request.json);\n\n// example output:\n{\n    someJsonKey: 'someJsonValue'\n}\n</code></pre>"},{"location":"apigateway/request/#requestxml","title":"<code>request.xml</code>","text":"Warning <p>This will raise an unhandled exception if the body is not xml compatible</p> <pre><code>console.log(request.xml);\n\n// example output:\n{\n    someXMLKey: 'someXMLValue'\n}\n</code></pre>"},{"location":"apigateway/request/#requestgraphql","title":"<code>request.graphql</code>","text":"Info <p>This is graphql string since there is no object equivalent; you can pass this directly to your graphql resolver</p> <pre><code>console.log(request.graphql);\n\n// example output:\n'{\n    players {\n        name\n    }\n}'\n</code></pre>"},{"location":"apigateway/request/#requestbody","title":"<code>request.body</code>","text":"Tip <p>This is the safest way to get the body of the request. It will use the <code>content-type</code> header to determine the data sent and convert it; if the data can't be converted for whatever reason it will catch the error and return the raw body provided unconverted.</p> <pre><code>console.log(request.body);\n\n// example output:\n{\n    someXMLKey: 'someXMLValue'\n}\n</code></pre>"},{"location":"apigateway/request/#requestraw","title":"<code>request.raw</code>","text":"<pre><code>console.log(request.raw);\n\n// example output: whatever the raw data of the body is; string, json string, xml, binary, etc\n</code></pre>"},{"location":"apigateway/request/#requestcontext","title":"<code>request.context</code>","text":"Tip <p>This is the only mutable property of the request, to be used by any of the <code>before</code> or <code>beforeAll</code> middleware options</p> <pre><code>request.context = {application_assignable: true}\nconsole.log(request.context);\n\n// example output:\n{\n    application_assignable: true\n}\n</code></pre>"},{"location":"apigateway/request/#requestevent","title":"<code>request.event</code>","text":"Warning <p>This is the original full request. Not advisable to use this as defeats the purpose of the entire Acai . In addition, you don't want to mutate this object and potentially mess up the entire router.</p> <pre><code>console.log(request.event);\n\n// example output:\n{\n    \"version\": \"2.0\",\n    \"routeKey\": \"$default\",\n    \"rawPath\": \"/my/path\",\n    \"rawQueryString\": \"parameter1=value1&amp;parameter1=value2&amp;parameter2=value\",\n    \"cookies\": [\n        \"cookie1\",\n        \"cookie2\"\n    ],\n    \"headers\": {\n        \"header1\": \"value1\",\n        \"header2\": \"value1,value2\"\n    },\n    \"queryStringParameters\": {\n        \"parameter1\": \"value1,value2\",\n        \"parameter2\": \"value\"\n    },\n    \"requestContext\": {\n        \"accountId\": \"123456789012\",\n        \"apiId\": \"api-id\",\n        \"authentication\": {\n            \"clientCert\": {\n                \"clientCertPem\": \"CERT_CONTENT\",\n                \"subjectDN\": \"www.example.com\",\n                \"issuerDN\": \"Example issuer\",\n                \"serialNumber\": \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\",\n                \"validity\": {\n                    \"notBefore\": \"May 28 12:30:02 2019 GMT\",\n                    \"notAfter\": \"Aug  5 09:36:04 2021 GMT\"\n                }\n            }\n        },\n        \"authorizer\": {\n            \"jwt\": {\n                \"claims\": {\n                    \"claim1\": \"value1\",\n                    \"claim2\": \"value2\"\n                },\n                \"scopes\": [\n                    \"scope1\",\n                    \"scope2\"\n                ]\n            }\n        },\n        \"domainName\": \"id.execute-api.us-east-1.amazonaws.com\",\n        \"domainPrefix\": \"id\",\n        \"http\": {\n            \"method\": \"POST\",\n            \"path\": \"/my/path\",\n            \"protocol\": \"HTTP/1.1\",\n            \"sourceIp\": \"IP\",\n            \"userAgent\": \"agent\"\n        },\n        \"requestId\": \"id\",\n        \"routeKey\": \"$default\",\n        \"stage\": \"$default\",\n        \"time\": \"12/Mar/2020:19:03:58 +0000\",\n        \"timeEpoch\": 1583348638390\n    },\n    \"body\": \"Hello from Lambda\",\n    \"pathParameters\": {\n        \"parameter1\": \"value1\"\n    },\n    \"isBase64Encoded\": false,\n    \"stageVariables\": {\n        \"stageVariable1\": \"value1\",\n        \"stageVariable2\": \"value2\"\n    }\n}\n</code></pre>"},{"location":"apigateway/response/","title":"Response Object","text":"<p>By default, every endpoint function will receive an instance of the <code>ResponseClient</code> class (aka <code>response</code>) as the second argument of their function. This response object is meant to provide consistency to HTTP response codes and error signatures. Below is a list and examples of all the properties of the <code>response</code>:</p> Example <p>Don't like reading documentation? Then look at our examples which can run locally! </p>"},{"location":"apigateway/response/#response-properties","title":"Response Properties","text":"property type description <code>headers</code> object provide headers in key/value pairs to add new headers <code>code</code> int http response code to be returned the requester <code>body</code> any body of the response automatically converted to JSON string <code>rawBody</code> any body of the response not converted to JSON string <code>compress</code> bool will compress the body if set to true and add proper headers <code>setError</code> func function to set an error with a key and value <code>hasError</code> boolean simple property to check if response already has errors in it"},{"location":"apigateway/response/#responseheaders","title":"<code>response.headers</code>","text":"<pre><code>response.headers = {key: 'status', value: 'ok'};\nresponse.headers = {key: 'response_id', value: 'some-guid'};\n\nconsole.log(response.headers);\n\n// example output:\n{\n    status: 'ok',\n    response_id: 'some-guid',\n}\n</code></pre>"},{"location":"apigateway/response/#responsecode","title":"<code>response.code</code>","text":"<pre><code>response.code = 418;\n\nconsole.log(response.code);\n\n// example output:\n418\n</code></pre>"},{"location":"apigateway/response/#responsebody","title":"<code>response.body</code>","text":"Info <p>This will automatically convert the body to json if possible when called.</p> <pre><code>response.body = {someKey: 'someValue'};\n\nconsole.log(response.body);\n\n// example output:\n'{\"someKey\":\"someValue\"}'\n</code></pre>"},{"location":"apigateway/response/#responserawbody","title":"<code>response.rawBody</code>","text":"Info <p>This will NOT automatically convert the body to json if possible when called. This is great when working with an <code>afterAll</code> method that wants to mutate the body of the response before returning to the user.</p> <pre><code>response.rawBody = {someKey: 'someValue'};\n\nconsole.log(response.rawBody);\n\n// example output:\n{\n    someKey: 'someValue'\n}\n</code></pre>"},{"location":"apigateway/response/#responsecompress","title":"<code>response.compress</code>","text":"Info <p>This will compress whatever is in the body property.</p> <pre><code>response.compress = true;\n\nconsole.log(response.body);\n// example output: this will gzip and compress the body.\n</code></pre>"},{"location":"apigateway/response/#responseseterrorkey-value","title":"<code>response.setError(key, value)</code>","text":"<pre><code>const someKey = 'abc123';\nresponse.setError('someKey', `${someKey} is not a valid key to use with this service; try again with a different key`);\nconst anotherKey = 'def456';\nresponse.setError('anotherKey', `${anotherKey} is not the correct type to operate on`);\n\nconsole.log(response.rawBody);\n\n// example output:\n{\n    errors: [\n        {\n            key_path: 'someKey',\n            message: 'abc123 is not a valid key to use with this service; try again with a different key'\n        },\n        {\n            key_path: 'anotherKey',\n            message: 'def456 is not the correct type to operate on'\n        }\n    ]\n}\n</code></pre>"},{"location":"apigateway/response/#responsehaserror","title":"<code>response.hasError</code>","text":"<pre><code>response.setError('user', `your access is denied`);\nconsole.log(response.hasError);\n\n// example output:\ntrue\n\n\nresponse.body = {user: 'you have been granted access'};\nconsole.log(response.hasError);\n\n// example output:\nfalse\n</code></pre>"},{"location":"apigateway/endpoint/configurations/","title":"Endpoint Configurations","text":"<p>In order to encourage \"Happy Path Programming\" and make it easier for developers to validate request fully, the Acai comes with a host of built-in validations as well as the ability to extend with custom validations and middleware. See the full validation list here:</p> Examples <p>Don't like reading documentation? Then look at our examples, which can run locally! </p>"},{"location":"apigateway/endpoint/configurations/#validation-configurations","title":"Validation Configurations","text":"requirement type description <code>requiredHeaders</code> array every header in this array must be in the headers of request <code>availableHeaders</code> array only headers in this array will be allowed in the request <code>requiredQuery</code> array every item in the array is a required query string parameter <code>availableQuery</code> array only items in this array are allowed in the request <code>requiredPath</code> str when using parameters, this is the required parameters <code>requiredBody</code> str references a JSschema component in your <code>schemaFile</code> <code>requiredAuth</code> bool will trigger <code>withAuth</code> function defined in the router config <code>before</code> func a custom function to be ran before your method function <code>after</code> func a custom function to be ran after your method function <code>dataClass</code> class a custom class that will be passed instead of the request obj [<code>custom-requirement</code>] any see bottom of page"},{"location":"apigateway/endpoint/configurations/#requiredheaders","title":"<code>requiredHeaders</code>","text":"Info <p>Headers are case-sensitive, make sure your casing matches your expectations.</p> <pre><code>exports.requirements = {\n    post: {\n        requiredHeaders: ['x-onbehalf-of']\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/configurations/#availableheaders","title":"<code>availableHeaders</code>","text":"Warning <p>This is not recommended for frequent use as it raises errors for every header which does not conform to the array provided. Many browsers, http tools, and libraries will automatically add headers to request, unbeknownst to the user. By using this setting, you will force every user of the endpoint to take extra care with the headers provided and may result in poor API consumer experience.</p> <pre><code>exports.requirements = {\n    post: {\n        availableHeaders: ['x-onbehalf-of']\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/configurations/#requiredquery","title":"<code>requiredQuery</code>","text":"<pre><code>exports.requirements = {\n    get: {\n        requiredQuery: ['requester_id']\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/configurations/#availablequery","title":"<code>availableQuery</code>","text":"<pre><code>exports.requirements = {\n    get: {\n        availableQuery: ['grower_email', 'grower_phone', 'grower_first', 'grower_last'],\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/configurations/#requiredpath","title":"<code>requiredPath</code>","text":"Warning <p>This is required if you are using dynamic routing (ex. <code>{id}.js</code>) with path parameters. The router will provide a path values in <code>request.pathParams</code></p> <pre><code>exports.requirements = {\n    put: {\n        requiredPath: 'grower/{id}'\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/configurations/#requiredbody","title":"<code>requiredBody</code>","text":"Info <p>This is referencing a <code>components.schemas</code> section of your openapi.yml file defined in the <code>schemaFile</code> value in your router config.</p> <pre><code>exports.requirements = {\n    post: {\n        requiredBody: 'post-grower-request'\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/configurations/#requiredauth","title":"<code>requiredAuth</code>","text":"Info <p>This will trigger the function you provided in the router config under the <code>withAuth</code> configuration</p> <pre><code>exports.requirements = {\n    post:{\n        requiredAuth: true\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/configurations/#before","title":"<code>before</code>","text":"<pre><code>exports.requirements = {\n    patch: {\n        before: async (request, response, requirements) =&gt; {\n            const result = await db.checkGrowerIdExists(request.pathParams.id);\n            if (!result){\n                response.setError('grower/{id}', `grower with id: ${id} does not exist.`);\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/configurations/#after","title":"<code>after</code>","text":"<pre><code>exports.requirements = {\n    get: {\n        after: async (request, response, requirements) =&gt; {\n            const relations = await db.getRequesterRelations(request.headers['x-requester-id']);\n            const results = []\n            for (const grower in response.rawBody){\n                if (relations.includes(grower.id)){\n                    results.push(grower);\n                }\n            }\n            response.body = results;\n            return response;\n        }\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/configurations/#dataclass","title":"<code>dataClass</code>","text":"Info <p>Instead of getting a <code>request</code> and <code>response</code> as arguments passed to your API function, you will get an instance of the class you provided here</p> <pre><code>exports.requirements = {\n    post: {\n        dataClass: Grower\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/configurations/#custom-requirements-example","title":"custom requirements (example)","text":"Info <p>You can add as many custom requirements as you want, with any variable type you want, and they will be passed to your <code>beforeAll</code>, <code>before</code>, <code>afterAll</code>, <code>after</code> and <code>withAuth</code> middleware defined functions.</p> <pre><code>exports.requirements = {\n    post:{\n        myCustomBeforeAllPermission: {permission: 'allow-delete-grower'}\n    }\n};\n</code></pre>"},{"location":"apigateway/endpoint/setup/","title":"Endpoint Set Up","text":"<p>Each endpoint is meant to be treated as a separate module within the API. These endpoints are not meant to be extended or commingled and thus should approach individually. If resources are meant to be shared across endpoints, then those resources should be packaged as shared classes or utilities.</p> <p>Each endpoint should read as a procedural list of steps to be completed. To help keep this list clean and easy to read, the Acai follows its philosophy of \"Happy Path Programming.\" To achieve this, the Acai comes with a plethora of validation configurations with the ability to extend with even more customized validation options. This ensures the request sent to your endpoint will be correct with little need for exception handling or complex conditionals.</p> Examples <p>Don't like reading documentation? Then look at our examples, which can run locally! </p>"},{"location":"apigateway/endpoint/setup/#1-match-function-to-http-method","title":"1. Match Function to HTTP Method","text":"<p>Each endpoint must have stateless functions which match the name of the HTTP method. If endpoint is called the a <code>POST</code> HTTP method, then the <code>post</code> endpoint function is invoked.</p> <pre><code>// example for endpoint file: api/grower.js\n\nexports.requirements = {}; // discussed in next section below\n\nexports.post = async (request, response) =&gt; {\n    response.body = {message: '[POST] /grower was called'};\n    return response;\n};\n\nexports.get = async (request, response) =&gt; {\n    response.body = {message: '[GET] /grower was called'};\n    return response;\n};\n\nexports.patch = async (request, response) =&gt; {\n    response.body = {message: '[PATCH] /grower was called'};\n    return response;\n};\n\nexports.put = async (request, response) =&gt; {\n    response.body = {message: '[PUT] /grower was called'};\n    return response;\n};\n\nexports.delete = async (request, response) =&gt; {\n    response.body = {message: '[DELETE] /grower was called'};\n    return response;\n};\n\nexports.query = async (request, response) =&gt; {\n    response.body = {message: '[QUERY] /grower, a custom http method, was called'};\n    return response;\n};\n</code></pre>"},{"location":"apigateway/endpoint/setup/#2-configure-the-requirements-optional","title":"2. Configure the Requirements (optional)","text":"<p>Each method within the endpoint file can have individual validation requirements. These requirements allow you to test all structural points of the request, with the ability to use JSONSchema and custom middleware to further extend the validation options. Below is an example of a full requirements object:</p> Info <p>See the full configuration list, explanation and example of each setting in our Configurations Section.</p> Tip <p>If you are already using an <code>openapi.yml</code>, none of these requirements below are necessary. Ensure your <code>router</code> has enabled <code>autoValidate</code> with proper <code>schemaPath</code> configured and the below requirements are not necessary for any basic structural validation (headers, body, query, params will be checked via openapi.yml). You can still use <code>before</code>, <code>after</code> &amp; <code>dataClass</code> with other custom validations for more advanced use cases.</p> <pre><code>// example for endpoint file: api/grower.js\n\nconst Grower = require('api/logic/grower');\n\nexports.requirements = {\n    post: {\n        requiredHeaders: ['x-onbehalf-of'],\n        availableHeaders: ['x-requester-id', 'x-test-id'], //not advisable to use; too strict\n        requiredBody: 'post-grower-request'\n    },\n    get: {\n        requiredQuery: ['requester_id'],\n        availableQuery: ['grower_email', 'grower_phone', 'grower_first', 'grower_last'],\n    },\n    put: {\n        requiredPath: 'grower/{id}',\n        requiredAuth: true,\n        requiredBody: 'put-grower-request',\n        dataClass: Grower\n    },\n    patch: {\n        requiredPath: 'grower/{id}',\n        requiredAuth: true,\n        requiredBody: 'patch-grower-request',\n        before: async (request, response, requirements) =&gt; { // might be cleaner to put this in a separate file and call in context.\n            const result = await db.checkGrowerIdExists(request.pathParams.id);\n            if (!result){\n                response.setError('grower/{id}', `grower with id: ${id} does not exist.`);\n            }\n        }\n    },\n    delete: {\n        requiredPath: 'grower/{id}',\n        after: async (request, response, requirements) =&gt; { // might be cleaner to put this in a separate file and call in context.\n            const relations = await db.getRequesterRelations(request.headers['x-requester-id']);\n            const results = []\n            for (const grower in response.rawBody){\n                if (relations.includes(grower.id)){\n                    results.push(grower);\n                }\n            }\n            response.body = results;\n            return response;\n        }\n    }\n};\n\nexports.post = async (request, response) =&gt; {\n    response.body = {message: '[POST] /grower was called'};\n    return response;\n};\n\nexports.get = async (request, response) =&gt; {\n    response.body = {message: '[GET] /grower was called'};\n    return response;\n};\n\nexports.patch = async (request, response) =&gt; {\n    response.body = {message: '[PATCH] /grower was called'};\n    return response;\n};\n\nexports.put = async (grower, response) =&gt; {\n    response.body = {message: '[PUT] /grower was called; got instance of grower instead of request'};\n    return response;\n};\n\nexports.delete = async (request, response) =&gt; {\n    response.body = {message: '[DELETE] /grower was called'};\n    return response;\n};\n\nexports.query = async (request, response) =&gt; {\n    response.body = {message: '[QUERY] /grower, a custom http method, was called'};\n    return response;\n};\n</code></pre>"},{"location":"apigateway/router/configurations/","title":"Router Configurations","text":"<p>As mentioned previously, the router is highly configurable to each project needs and desires. The point of the router is to enforce predictable thus making the API more extensible. Below is a table of all the configuration options available:</p> Example <p>Don't like reading documentation? Then look at our examples which can run locally! </p>"},{"location":"apigateway/router/configurations/#configuration-options","title":"Configuration Options","text":"option type required description <code>afterAll</code> func no will call this function after EVERY request to the API <code>autoValidate</code> bool no; requires <code>schemaPath</code> will automatically validate request against openapi.yml <code>basePath</code> str yes the base path of the API Gateway instance this is running on <code>beforeAll</code> func no will call this function before EVERY request to the API <code>cacheSize</code> int no (default: 128) caches the routes and modules (not responses) for faster subsequent requests <code>cacheMode</code> enum no; all (default), static, dynamic determines which routes to cache; all, routes with dynamic paths or static only <code>globalLogger</code> bool no will assign the Acai logger to the global variable <code>globalLogger</code> <code>handlerPath</code> str yes, if <code>routingMode</code> == 'directory' file path pointing to the directory where the endpoints are <code>handlerPattern</code> str yes, if <code>routingMode</code> == 'pattern' glob pattern to be able to find the endpoint files <code>handlerList</code> object yes, if <code>routingMode</code> == 'list' object key, value pair to be able to map routes to files <code>loggerCallback</code> func no will call this function on every call to <code>global.logger</code> <code>onError</code> func no will call this function on every unhandled error; not including validation errors <code>routingMode</code> enum yes; directory or pattern or list determines how to route requests to the right files; 3 modes <code>schemaPath</code> str yes, if <code>autoValidate</code> file path pointing to the location of the openapi.yml file <code>withAuth</code> func no will call this function when <code>requirements</code> have <code>requiredAuth</code> set to <code>true</code>"},{"location":"apigateway/router/configurations/#example-router-config-with-directory-routing","title":"Example: Router Config with Directory Routing","text":"<pre><code>const {Router} = require('@syngenta-digital/Acai').apigateway;\nconst MiddlewareUtils = require('api/logic/utils/middleware');\nconst Authenticator = require('api/logic/authenticator');\n\nconst router = new Router({\n    basePath: 'api',\n    routingMode: 'directory',\n    handlerPath: 'api/handler',\n    schemaPath: 'api/openapi.yml',\n    autoValidate: true,\n    globalLogger: true,\n    cacheSize: 512,\n    cacheMode: 'all',\n    beforeAll: MiddlewareUtils.beforeAll,\n    afterAll: MiddlewareUtils.afterAll,\n    onError: MiddlewareUtils.onError,\n    withAuth: Authenticator.authenticate,\n    loggerCallback: MiddlewareUtils.loggerCallback,\n});\nrouter.autoLoad() // optional; pulls in files from disc into memory and shares on with concurrent lambdas\n\nexports.route = async (event) =&gt; {\n    return router.route(event);\n};\n</code></pre>"},{"location":"apigateway/router/configurations/#example-router-config-with-pattern-routing","title":"Example: Router Config with Pattern Routing","text":"<pre><code>const {Router} = require('@syngenta-digital/Acai').apigateway;\nconst MiddlewareUtils = require('api/logic/utils/middleware');\nconst Authenticator = require('api/logic/authenticator');\n\nconst router = new Router({\n    basePath: 'api',\n    routingMode: 'pattern',\n    handlerPattern: 'api/**/*.controller.js',\n    schemaPath: 'api/openapi.yml',\n    autoValidate: true,\n    globalLogger: true,\n    cacheSize: 512,\n    cacheMode: 'all',\n    beforeAll: MiddlewareUtils.beforeAll,\n    afterAll: MiddlewareUtils.afterAll,\n    onError: MiddlewareUtils.onError,\n    withAuth: Authenticator.authenticate,\n    loggerCallback: MiddlewareUtils.loggerCallback,\n});\nrouter.autoLoad() // optional; pulls in files from disc into memory and shares on with concurrent lambdas\n\nexports.route = async (event) =&gt; {\n    return router.route(event);\n};\n</code></pre>"},{"location":"apigateway/router/configurations/#example-router-config-with-list-routing","title":"Example: Router Config with List Routing","text":"<pre><code>const {Router} = require('@syngenta-digital/Acai').apigateway;\nconst MiddlewareUtils = require('api/logic/utils/middleware');\nconst Authenticator = require('api/logic/authenticator');\n\n// best to put this is in separate file; but the sake of brevity...\nconst routes = {\n    'GET::grower': 'api/routes/grower.js',\n    'POST::farm': 'api/routes/farm.js',\n    'PUT:farm/{farmId}/field/{fieldId}': 'api/routes/farm-field.js'\n}\n\nconst router = new Router({\n    basePath: 'api',\n    routingMode: 'list',\n    handlerList: routes,\n    schemaPath: 'api/openapi.yml',\n    autoValidate: true,\n    globalLogger: true,\n    cacheSize: 512,\n    cacheMode: 'all',\n    beforeAll: MiddlewareUtils.beforeAll,\n    afterAll: MiddlewareUtils.afterAll,\n    onError: MiddlewareUtils.onError,\n    withAuth: Authenticator.authenticate,\n    loggerCallback: MiddlewareUtils.loggerCallback\n});\n\nrouter.autoLoad() // optional; pulls in files from disc into memory and shares on with concurrent lambdas\n\nexports.route = async (event) =&gt; {    \n    return router.route(event);\n};\n</code></pre>"},{"location":"apigateway/router/setup/","title":"Router Set Up","text":"Example <p>Don't like reading documentation? Then look at our examples which can run locally! </p>"},{"location":"apigateway/router/setup/#1-configure-the-lambda","title":"1. Configure the Lambda","text":"Serverless Framework <pre><code>functions:\n    apigateway-handler:\n        handler: api/handler/router.route\n        events:\n            - http:\n                path: /\n                method: ANY\n            - http:\n                path: /{proxy+}\n                method: ANY    \n</code></pre>"},{"location":"apigateway/router/setup/#2-configure-the-router","title":"2. Configure the Router","text":"<p>There are three routing modes: <code>directory</code>, <code>pattern</code> and <code>list</code>; <code>directory</code> and <code>pattern</code> routing mode requires your project files to be placed in a particular way; <code>list</code> does not require any structure, as you define every route and it's corresponding file. Below are the three ways configure your router:</p>"},{"location":"apigateway/router/setup/#routing-mode-directory","title":"Routing Mode: Directory","text":"Tip <p>If you are using route params, you will need use dynamic file names which follow this pattern: <code>{some-variable-name}.js</code>.</p> file structurerouter.js <pre><code>~~ Directory ~~                     ~~ Route ~~\n===================================================================\n\ud83d\udce6api/                              |          \n\u2502---\ud83d\udcc2handler                       |           \n    \u2502---\ud83d\udcdcrouter.js                 |\n    \u2502---\ud83d\udcdcorg.js                    | /org    \n    \u2502---\ud83d\udcc2grower                    |\n        \u2502---\ud83d\udcdcindex.js              | /grower\n        \u2502---\ud83d\udcdc{growerId}.js         | /grower/{growerId}\n    \u2502---\ud83d\udcc2farm                      |\n        \u2502---\ud83d\udcdcindex.js              | /farm\n        \u2502---\ud83d\udcc2{farmId}              |\n            \u2502---\ud83d\udcdcindex.js          | /farm/{farmId}\n            \u2502---\ud83d\udcc2field             |\n                \u2502---\ud83d\udcdcindex.js      | /farm/{farmId}/field\n                \u2502---\ud83d\udcdc{fieldId}.js  | /farm/{farmId}/field/{fieldId}\n</code></pre> <pre><code>const {Router} = require('@syngenta-digital/Acai').apigateway;\nconst router = new Router({\n    routingMode: 'directory',\n    basePath: 'api', // for use with custom apigateway domain\n    handlerPath: 'api/handler'\n});\nrouter.autoLoad() // optional; pulls in files from disc into memory and shares on with concurrent lambdas\n\nexports.route = async (event) =&gt; {\n    return router.route(event);\n};\n</code></pre>"},{"location":"apigateway/router/setup/#routing-mode-pattern","title":"Routing Mode: Pattern","text":"Tip <p>You can use any glob pattern you like; common patterns are:</p> <ul> <li> <p><code>/**/*.controller.js</code></p> </li> <li> <p><code>/**/handler.*.js</code></p> </li> <li> <p><code>/**/endpoint.js</code></p> </li> </ul> file structurerouter.js <pre><code>~~ Pattern ~~                               ~~ Route ~~\n================================================================================\n\ud83d\udce6api/                                      |\n\u2502---\ud83d\udcdcrouter.js                             |\n\u2502---\ud83d\udcc2org                                   |\n    \u2502---\ud83d\udcdcorg.controller.js                 | /org\n    \u2502---\ud83d\udcdcorg.model.js                      |\n    \u2502---\ud83d\udcdcorg.factory.js                    |\n    \u2502---\ud83d\udcdcorg.logic.js                      |\n\u2502---\ud83d\udcc2grower                                |\n    \u2502---\ud83d\udcdcgrower.controller.js              | /grower\n    \u2502---\ud83d\udcdc{growerId}.controller.js          | /grower/{growerId}\n    \u2502---\ud83d\udcdcgrower.model.js                   |\n    \u2502---\ud83d\udcdcgrower.factory.js                 |\n    \u2502---\ud83d\udcdcgrower.logic.js                   |\n\u2502---\ud83d\udcc2farm                                  |\n    \u2502---\ud83d\udcdcfarm.controller.js                | /farm\n    \u2502---\ud83d\udcdcfarm.logic.js                     |\n    \u2502---\ud83d\udcdcfarm.model.js                     |\n    \u2502---\ud83d\udcc2{farmId}                          |\n        \u2502---\ud83d\udcdc{farmId}.controller.js        | /farm/{farmId}\n        \u2502---\ud83d\udcc2field                         |\n            \u2502---\ud83d\udcdcfield.controller.js       | /farm/{farmId}/field\n            \u2502---\ud83d\udcdc{fieldId}.controller.js   | /farm/{farmId}/field/{fieldId}\n            \u2502---\ud83d\udcdcfield.logic.js            |\n            \u2502---\ud83d\udcdcfield.model.js            |\n</code></pre> <pre><code>const {Router} = require('@syngenta-digital/Acai').apigateway;\n\nexports.route = async (event) =&gt; {\n    const router = new Router({\n        routingMode: 'pattern',\n        basePath: 'api', // for use with custom apigateway domain\n        handlerPattern: 'api/**/*.controller.js'\n    });\n    return router.route(event);\n};\n</code></pre>"},{"location":"apigateway/router/setup/#routing-mode-list","title":"Routing Mode: List","text":"Tip <p>It may be more maintainable to store your routes list in a separate file, this example does not have that for brevity</p> Warning <p>Even though you are matching your files to your routes, the handler files must have functions that match HTTP method (see endpoint examples here)</p> Danger <p>This is not the preferred routing mode to use; this can lead to a sloppy, unpredictable project architecture which will be hard to maintain and extend. This is NOT RECOMMENDED.</p> file structurerouter.js <pre><code>File structure doesn't matter\n======================================================\n\ud83d\udce6api/\n\u2502---\ud83d\udcdcrouter.js\n</code></pre> <pre><code>const {Router} = require('@syngenta-digital/Acai').apigateway;\nconst router = new Router({\n    routingMode: 'list',\n    basePath: 'api', // for use with custom apigateway domain\n    handlerList: {\n        'GET::grower': 'api/routes/grower.js',\n        'POST::farm': 'api/routes/farm.js',\n        'PUT:farm/{farmId}/field/{fieldId}': 'api/routes/farm-field.js'\n    }\n});\n\nrouter.autoLoad() // optional; pulls in files from disc into memory and shares on with concurrent lambdas\nexports.route = async (event) =&gt; {\n    return router.route(event);\n};\n</code></pre>"},{"location":"apigateway/router/setup/#3-configure-the-endpoint-file","title":"3. Configure the Endpoint File","text":"<p>Every endpoint file should contain a function which matches an HTTP method in lower case. Most common are <code>post</code>, <code>get</code>, <code>put</code>, <code>patch</code>, <code>delete</code>, but this library does support custom methods, if you so choose. As long as the method of the request matches the function name, it will work.</p> <pre><code>exports.post = async (request, response) =&gt; {\n    response.body = {post: true};\n    return response;\n};\n\nexports.get = async (request, response) =&gt; {\n    response.body = {get: true};\n    return response;\n};\n\nexports.patch = async (request, response) =&gt; {\n    response.body = {patch: true};\n    return response;\n};\n\nexports.put = async (request, response) =&gt; {\n    response.body = {put: true};\n    return response;\n};\n\nexports.delete = async (request, response) =&gt; {\n    response.body = {delete: true};\n    return response;\n};\n\n// this is a non-compliant, custom http method; this will work.\nexports.query = async (request, response) =&gt; {\n    response.body = [{query: true}];\n    return response;\n};\n</code></pre>"},{"location":"common/logger/","title":"Logger","text":"<p>The Acai logger is automatically logs in a formatted JSON string for easy reading and searching with AWS Cloud Watch. A developer can then use AWS filter patterns making it effortless to find the exact log they are looking for. Below is an example of how to use the logger:</p>"},{"location":"common/logger/#examples","title":"Examples","text":""},{"location":"common/logger/#basic-usage","title":"Basic Usage","text":"<pre><code>// if you use globalLogger: true, in any config the logger is available globally\nglobal.logger.info('testing info');\n\nglobal.logger.debug('testing debug');\n\nglobal.logger.warn('testing warn');\n\nglobal.logger.error('testing warn');\n\n// standard output\n{\n    level: '$LEVEL', \n    log: '$MESSGE'\n}\n</code></pre>"},{"location":"common/logger/#advance-usage","title":"Advance Usage","text":"<pre><code>// if you use globalLogger: true, in any config the logger is available globally\nglobal.logger.log({level:'INFO', log: {someKey: 'testing info'}});\n\n// standard output\n{\n    level: 'INFO',\n    log: {\n        someKey: 'testing info'\n    }\n}\n</code></pre>"},{"location":"dynamodb/","title":"DynamoDB","text":"<p>Event handler for Amazon DynamoDB Stream Events.</p>"},{"location":"dynamodb/#features","title":"Features","text":"<ul> <li>Automatically convert DynamoDB JSON to standard JSON</li> <li>Only run on certain DynamoDB operations, like on when items are created, updated or deleted</li> <li>Able to validate DynamoDB record against a JSON Schema</li> <li>Assign Data Classes to records instead of getting raw DynamoDB JSON objects</li> </ul>"},{"location":"dynamodb/configurations/","title":"DynamoDB Event Configurations","text":"<p>The Dynamodb event will automatically handle many common things done when eventing off a DynamoDB stream. Developers then have the ability to further extend that functionality with custom middleware. Below is a full list of all the configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at our examples, which can be deployed in 1 command into your AWS account! </p>"},{"location":"dynamodb/configurations/#configuration-options","title":"Configuration Options","text":"option type required default description <code>before</code> func no null a custom function to be ran before your records are pulled <code>dataClass</code> class no null a custom class that will be passed instead of the records object <code>globalLogger</code> bool no false will assign the Acai logger to the global variable <code>globalLogger</code> <code>operations</code> array no ['create', 'update', 'delete'] will only run if record was created from the listed operation <code>operationError</code> bool no false will raise exception if operation of record is not from listed operations <code>requiredBody</code> str or obj no null will validate body of record against this schema <code>schemaPath</code> str no null file path pointing to the location of the openapi.yml file <code>validationError</code> bool no false will raise exception if validation of record fails"},{"location":"dynamodb/configurations/#example-dynamodb-configuration-options","title":"Example: DynamoDB Configuration Options","text":"<pre><code>const EventClient = require('@syngenta-digital/Acai').dynamodb.Event;\nconst Grower = require('api/logic/grower');\n\nexports.stream = async (event) =&gt; {\n    const options = {\n        globalLogger: true,\n        operations: ['create', 'update'], // [create, update, delete] by default\n        operationError: false, // will raise exception if wrong operation;  default false\n        requiredBody: 'ddb-record',\n        schemaPath: 'api/openapi.yml',\n        validationError: false, // will raise exception if validation fails;  default false\n        dataClass: Grower, // will get instance of this instead of record instance\n        before: (records) =&gt; {\n            // run this before records are sent\n        }\n    }\n    const eventClient = new EventClient(event, options);\n    const records = await eventClient.getRecords();\n    for (const grower of records) {\n        // do stuff here\n    }\n};\n</code></pre>"},{"location":"dynamodb/record/","title":"DynamoDB Record Object","text":"<p>The DynamoDB event will by default provide instances of <code>record</code> classes which will be easier to work with then a standard lambda event record object. This is the same object which will be passed down to the <code>dataClass</code>, if you provide on in your configuration. Below is a list of all the properties and example outputs for the DynamoDB event record:</p> Examples <p>Don't like reading documentation? Then look at our examples, which can be deployed in 1 command into your AWS account! </p>"},{"location":"dynamodb/record/#record-properties","title":"Record Properties","text":"property type description <code>body</code> object the new image of dynamodb record; created or updated <code>created</code> float the approximate creationDate time <code>expired</code> bool whether the ttl has expired <code>id</code> str the id of the event which invoked the lambda <code>identity</code> object the identity who triggered the dynamodb change <code>keys</code> object the keys of DynamoDB record <code>name</code> str the name of the event which invoked the lambda <code>newImage</code> object the new image of dynamodb record; created or updated <code>oldImage</code> object the old image of dynamodb record; updated or deleted <code>operation</code> str triggered operation lambda (create, update, delete) <code>region</code> str the region the record is from <code>size</code> int the size in bytes of the record <code>source</code> str the source of the event which invoked the lambda <code>sourceARN</code> str the event source arn <code>streamType</code> str the stream view type <code>version</code> str the event version"},{"location":"dynamodb/record/#recordregion","title":"<code>record.region</code>","text":"<pre><code>console.log(record.region);\n\n// example output:\n'us-east-2'\n</code></pre>"},{"location":"dynamodb/record/#recordid","title":"<code>record.id</code>","text":"<pre><code>console.log(record.id);\n\n// example output:\n'9a37c0d03eb60f7cf70cabc823de9907'\n</code></pre>"},{"location":"dynamodb/record/#recordname","title":"<code>record.name</code>","text":"<pre><code>console.log(record.name);\n\n// example output:\n'INSERT'\n</code></pre>"},{"location":"dynamodb/record/#recordsource","title":"<code>record.source</code>","text":"<pre><code>console.log(record.source);\n\n// example output:\n'aws:dynamodb'\n</code></pre>"},{"location":"dynamodb/record/#recordkeys","title":"<code>record.keys</code>","text":"Info <p>This is converted from the original DDB JSON to standard json</p> <pre><code>console.log(record.keys);\n\n// example output:\n{\n    example_id: '123456789'\n}\n</code></pre>"},{"location":"dynamodb/record/#recordoldimage","title":"<code>record.oldImage</code>","text":"Info <p>This is converted from the original DDB JSON to standard json</p> <pre><code>console.log(record.oldImage);\n\n// example output:\n{\n    old_data: '123456789'\n}\n</code></pre>"},{"location":"dynamodb/record/#recordnewimage","title":"<code>record.newImage</code>","text":"Info <p>This is converted from the original DDB JSON to standard json</p> <pre><code>console.log(record.newImage);\n\n// example output:\n{\n    new_data: '123456789'\n}\n</code></pre>"},{"location":"dynamodb/record/#recordbody","title":"<code>record.body</code>","text":"Info <p>This is converted from the original DDB JSON to standard json from <code>newImage</code></p> <pre><code>console.log(record.body);\n\n// example output:\n{\n    new_data: '123456789'\n}\n</code></pre>"},{"location":"dynamodb/record/#recordoperation","title":"<code>record.operation</code>","text":"<pre><code>console.log(record.operation);\n\n// example output:\n'create'\n</code></pre>"},{"location":"dynamodb/record/#recordsourcearn","title":"<code>record.sourceARN</code>","text":"<pre><code>console.log(record.sourceARN);\n\n// example output:\n'arn:aws:dynamodb:us-east-1:771875143460:table/test-example/stream/2019-10-04T23:18:26.340'\n</code></pre>"},{"location":"dynamodb/record/#recordversion","title":"<code>record.version</code>","text":"<pre><code>console.log(record.version);\n\n// example output:\n'1.1'\n</code></pre>"},{"location":"dynamodb/record/#recordstreamtype","title":"<code>record.streamType</code>","text":"<pre><code>console.log(record.streamType);\n\n// example output:\n'NEW_AND_OLD_IMAGES'\n</code></pre>"},{"location":"dynamodb/record/#recordsize","title":"<code>record.size</code>","text":"<pre><code>console.log(record.size);\n\n// example output:\n1124\n</code></pre>"},{"location":"dynamodb/record/#recordcreated","title":"<code>record.created</code>","text":"<pre><code>console.log(record.created);\n\n// example output:\n1538695200.0 //unix timestamp\n</code></pre>"},{"location":"dynamodb/record/#recordidentity","title":"<code>record.identity</code>","text":"<pre><code>console.log(record.identity);\n\n// example output:\n{\n    type: 'Service',\n    principalId: 'dynamodb.amazonaws.com'\n}\n</code></pre>"},{"location":"dynamodb/record/#recordexpired","title":"<code>record.expired</code>","text":"<pre><code>console.log(record.expired);\n\n// example output:\nfalse\n</code></pre>"},{"location":"s3/","title":"S3","text":"<p>Event handler for Amazon S3 Bucket Events.</p>"},{"location":"s3/#features","title":"Features","text":"<ul> <li>Automatically convert JSON files to JSON objects</li> <li>Automatically convert CSV files to JSON objects</li> <li>Only run on certain S3 operations, like on when items are created, updated or deleted</li> <li>Able to validate S3 record against a JSON Schema</li> <li>Assign Data Classes to records instead of getting raw S3 JSON objects</li> </ul>"},{"location":"s3/configurations/","title":"S3 Event Configurations","text":"<p>The S3 event will automatically handle many common things done when eventing off a S3 event. Developers then have the ability to further extend that functionality with custom middleware. Below is a full list of all the configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at our examples, which can be deployed in 1 command into your AWS account! </p>"},{"location":"s3/configurations/#configuration-options","title":"Configuration Options","text":"option type required default description <code>before</code> func no null a custom function to be ran before your records are pulled <code>dataClass</code> class no null a custom class that will be passed instead of the records object <code>getObject</code> bool no false will pull the file from S3 bucket and hold in memory <code>globalLogger</code> bool no false will assign the Acai logger to the global variable <code>globalLogger</code> <code>isJSON</code> bool no false will convert file into JSON object; requires <code>getObject</code> <code>isCSV</code> bool no false will convert file into CSV object; requires <code>getObject</code> <code>operations</code> array no ['create', 'update', 'delete'] will only run if record was created from the listed operation <code>operationError</code> bool no false will raise exception if operation of record is not from listed operations <code>requiredBody</code> str or obj no null will validate body of record against this schema, requires <code>isJSON</code> <code>schemaPath</code> str no null file path pointing to the location of the openapi.yml file <code>validationError</code> bool no false will raise exception if validation of record fails"},{"location":"s3/configurations/#example-s3-configuration-options","title":"Example: S3 Configuration Options","text":"<pre><code>const EventClient = require('acai-js').s3.Event;\nconst Grower = require('api/logic/grower');\n\nexports.eventer = async (event) =&gt; {\n    const options = {\n        globalLogger: true,\n        operations: ['create', 'delete'], // [create, update, delete] by default; s3 doesn't support delete\n        operationError: false, // will raise exception if wrong operation;  default false\n        requiredBody: 's3-record', // only works with isJSON\n        schemaPath: 'api/openapi.yml', // only works with isJSON\n        validationError: false, // will raise exception if validation fails;  default false\n        getObject: true, // required for isJSON or isCSV\n        isJSON: true, // will convert file into JSON object, must be valid JSON file\n        isCSV: false, // will convert file into object, must be valid CSV file\n        dataClass: Grower, // will get instance of this instead of record instance\n        before: (records) =&gt; {\n            // run this before records are sent\n        }\n    }\n    const eventClient = new EventClient(event, options);\n    const records = await eventClient.getRecords();\n    for (const grower of records) {\n        // do stuff here\n    }\n};\n</code></pre>"},{"location":"s3/record/","title":"S3 Record Object","text":"<p>The S3 event will by default provide instances of <code>record</code> classes which will be easier to work with then standard lambda event record object. This is the same object which will be passed down to the <code>dataClass</code>, if you provide on in your configuration. Below is a list of all the properties and example outputs for the S3 event record:</p> Example <p>Don't like reading documentation? Then look at our examples which can be deployed in 1 command into your AWS account! </p>"},{"location":"s3/record/#record-properties","title":"Record Properties","text":"property type description <code>body</code> object the object from the bucket in memory; buffer, json or csv object <code>bucket</code> str the name of the bucket <code>id</code> str the id of configuration <code>key</code> str the bucket key <code>name</code> str the name of the event which invoked the lambda <code>object</code> object the object described from the bucket <code>operation</code> str triggered operation lambda (create, delete) <code>region</code> str the region the record is from <code>request</code> object the request parameters <code>response</code> object the response parameters <code>source</code> str the source of the event which invoked the lambda <code>time</code> float the event time <code>version</code> object the s3 schema version"},{"location":"s3/record/#recordregion","title":"<code>record.region</code>","text":"<pre><code>console.log(record.region);\n\n// example output:\n'us-east-2'\n</code></pre>"},{"location":"s3/record/#recordbody","title":"<code>record.body</code>","text":"<pre><code>console.log(record.body);\n\n// example output: depending on the configuration, it might be a Buffer, CSV, or JSON object\n// does require `getObject: true` to be set in the options of the EventClient\n</code></pre>"},{"location":"s3/record/#recordbucket","title":"<code>record.bucket</code>","text":"<pre><code>console.log(record.bucket);\n\n// example output:\n{\n    \"name\": \"DOC-EXAMPLE-BUCKET\",\n    \"ownerIdentity\": {\n        \"principalId\": \"A3I5XTEXAMAI3E\"\n    },\n    \"arn\": \"arn:aws:s3:::lambda-artifacts-deafc19498e3f2df\"\n}\n</code></pre>"},{"location":"s3/record/#recordid","title":"<code>record.id</code>","text":"<pre><code>console.log(record.id);\n\n// example output:\n'828aa6fc-f7b5-4305-8584-487c791949c1'\n</code></pre>"},{"location":"s3/record/#recordname","title":"<code>record.name</code>","text":"<pre><code>console.log(record.name);\n\n// example output:\n'ObjectCreated:Put'\n</code></pre>"},{"location":"s3/record/#recordsource","title":"<code>record.source</code>","text":"<pre><code>console.log(record.source);\n\n// example output:\n'aws:s3'\n</code></pre>"},{"location":"s3/record/#recordtime","title":"<code>record.time</code>","text":"<pre><code>console.log(record.time);\n\n// example output:\n'2019-09-03T19:37:27.192Z'\n</code></pre>"},{"location":"s3/record/#recordkey","title":"<code>record.key</code>","text":"<pre><code>console.log(record.key);\n\n// example output:\n'some-directory/b21b84d653bb07b05b1e6b33684dc11b.json'\n</code></pre>"},{"location":"s3/record/#recordobject","title":"<code>record.object</code>","text":"<pre><code>console.log(record.object);\n\n// example output:\n{\n    'key': 'some-directory/b21b84d653bb07b05b1e6b33684dc11b.json',\n    'size': 1305107,\n    'eTag': 'b21b84d653bb07b05b1e6b33684dc11b',\n    'sequencer': '0C0F6F405D6ED209E1'\n}\n</code></pre>"},{"location":"s3/record/#recordoperation","title":"<code>record.operation</code>","text":"<pre><code>console.log(record.operation);\n\n// example output:\n'create'\n</code></pre>"},{"location":"s3/record/#recordrequest","title":"<code>record.request</code>","text":"<pre><code>console.log(record.request);\n\n// example output:\n{\n    \"sourceIPAddress\": \"205.255.255.255\"\n}\n</code></pre>"},{"location":"s3/record/#recordresponse","title":"<code>record.response</code>","text":"<pre><code>console.log(record.response);\n\n// example output:\n{\n    \"x-amz-request-id\": \"D82B88E5F771F645\",\n    \"x-amz-id-2\": \"vlR7PnpV2Ce81l0PRw6jlUpck7Jo5ZsQjryTjKlc5aLWGVHPZLj5NeC6qMa0emYBDXOo6QBU0Wo=\"\n}\n</code></pre>"},{"location":"s3/record/#recordversion","title":"<code>record.version</code>","text":"<pre><code>console.log(record.version);\n\n// example output:\n\"1.0\"\n</code></pre>"},{"location":"sqs/","title":"SNS/SQS","text":"<p>Event handler for Amazon SNS/SQS Events.</p>"},{"location":"sqs/#features","title":"Features","text":"<ul> <li>Automatically convert JSON from message body</li> <li>Automatically flatten message attributes</li> <li>Able to message body against a JSON Schema</li> <li>Assign Data Classes to records instead of getting record objects</li> </ul>"},{"location":"sqs/configurations/","title":"SNS/SQS Event Configurations","text":"<p>The SNS/SQS event will automatically handle many common things done when eventing off an SNS/SQS stream. Developers then have the ability to further extend that functionality with custom middleware. Below is a full list of all the configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at our examples, which can be deployed in 1 command into your AWS account! </p>"},{"location":"sqs/configurations/#configuration-options","title":"Configuration Options","text":"option type required default description <code>before</code> func no null a custom function to be ran before your records are pulled <code>dataClass</code> class no null a custom class that will be passed instead of the records object <code>globalLogger</code> bool no false will assign the Acai logger to the global variable <code>globalLogger</code> <code>requiredBody</code> str or obj no null will validate body of record against this schema <code>schemaPath</code> str no null file path pointing to the location of the openapi.yml file <code>validationError</code> bool no false will raise exception if validation of record fails"},{"location":"sqs/configurations/#example-snssqs-configuration-options","title":"Example: SNS/SQS Configuration Options","text":"<pre><code>const EventClient = require('@syngenta-digital/Acai').sqs.Event;\nconst Grower = require('api/logic/grower');\n\nexports.listen = async (event) =&gt; {\n    const options = {\n        globalLogger: true,\n        requiredBody: 'sqs-record',\n        schemaPath: 'api/openapi.yml',\n        validationError: false, // will raise exception if validation fails;  default false\n        dataClass: Grower, // will get instance of this instead of record instance\n        before: (records) =&gt; {\n            // run this before records are sent\n        }\n    }\n    const eventClient = new EventClient(event, options);\n    const records = await eventClient.getRecords();\n    for (const grower of records) {\n        // do stuff here\n    }\n};\n</code></pre>"},{"location":"sqs/record/","title":"SNS/SQS Record Object","text":"<p>The SNS/SQS event will by default provide instances of <code>record</code> classes which will be easier to work with then a standard lambda event record object. This is the same object which will be passed down to the <code>dataClass</code>, if you provide on in your configuration. Below is a list of all the properties and example outputs for the SNS/SQS event record:</p> Examples <p>Don't like reading documentation? Then look at our examples, which can be deployed in 1 command into your AWS account! </p>"},{"location":"sqs/record/#record-properties","title":"Record Properties","text":"property type description <code>attributes</code> object the attributes of the message <code>body</code> object the object from the bucket in memory; decodes json automatically <code>id</code> str the id of message <code>md5</code> str the message in an md4 hash format <code>messageAttributes</code> object the attributes of the message, flattened <code>raw</code> any the body of the message as is, no conversion <code>receiptHandle</code> str the handle of the receipt <code>region</code> str the region of the message <code>source</code> str the source of the event which invoked the lambda <code>sourceARN</code> str the arn of the source"},{"location":"sqs/record/#recordattributes","title":"<code>record.attributes</code>","text":"<pre><code>console.log(record.attributes);\n\n// example output:\n{\n    \"ApproximateReceiveCount\": \"1\",\n    \"SentTimestamp\": \"1545082650636\",\n    \"SenderId\": \"AIDAIENQZJOLO23YVJ4VO\",\n    \"ApproximateFirstReceiveTimestamp\": \"1545082650649\"\n}\n</code></pre>"},{"location":"sqs/record/#recordbody","title":"<code>record.body</code>","text":"<pre><code>console.log(record.body);\n\n// example output:\n{\n    some_key: 'some_value'\n}\n</code></pre>"},{"location":"sqs/record/#recordsource","title":"<code>record.source</code>","text":"<pre><code>console.log(record.source);\n\n// example output:\n'aws:sqs'\n</code></pre>"},{"location":"sqs/record/#recordmd5","title":"<code>record.md5</code>","text":"<pre><code>console.log(record.md5);\n\n// example output:\n'e4e68fb7bd0e697a0ae8f1bb342846b3'\n</code></pre>"},{"location":"sqs/record/#recordmessageattributes","title":"<code>record.messageAttributes</code>","text":"<pre><code>console.log(record.messageAttributes);\n\n// example output:\n{\n    some_attribute_key: 'some_attribute_value'\n}\n</code></pre>"},{"location":"sqs/record/#recordid","title":"<code>record.id</code>","text":"<pre><code>console.log(record.id);\n\n// example output:\n'2e1424d4-f796-459a-8184-9c92662be6da'\n</code></pre>"},{"location":"sqs/record/#recordraw","title":"<code>record.raw</code>","text":"<pre><code>console.log(record.raw);\n\n// example output:\n'{\"some_key\": \"some_value\"}'\n</code></pre>"},{"location":"sqs/record/#recordreceipthandle","title":"<code>record.receiptHandle</code>","text":"<pre><code>console.log(record.receiptHandle);\n\n// example output:\n'AQEBzWwaftRI0KuVm4tP+/7q1rGgNqicHq...'\n</code></pre>"},{"location":"sqs/record/#recordregion","title":"<code>record.region</code>","text":"<pre><code>console.log(record.region);\n\n// example output:\n'us-east-2'\n</code></pre>"},{"location":"sqs/record/#recordsourcearn","title":"<code>record.sourceARN</code>","text":"<pre><code>console.log(record.sourceARN);\n\n// example output:\n'arn:aws:sqs:us-east-2:123456789012:my-queue'\n</code></pre>"}]}